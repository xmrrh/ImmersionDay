[
{
	"uri": "/",
	"title": "Android App On AWS",
	"tags": [],
	"description": "",
	"content": "Create serverless-based social Android apps using Amplify and AI services AWS provides API services for AI features, including translations for various languages. In this lab, we will use AWS Amplify with these serviceless (Serverless) environments to build a social mobile app based on Android native. To do this, we use features such as user authentication (Cognito) and Graphql (Appsync). Created apps can be tested in the cloud through AWS Device Farm. Additionally, take advantage of the ability to collect and analyze user events using AmazonPinpoint.\n"
},
{
	"uri": "/socialapp/amplifyinstall/install_cli/",
	"title": "Amplify CLI Install",
	"tags": [],
	"description": "",
	"content": "AWS Amplify makes it easy to create, configure, and implement scalable mobile and web apps based on AWS. AWS Amplify provisions and manages backends for mobile applications.\nSimply select the features you need, such as authentication, analytics, and offline data synchronization, and Amplify automatically provisions and manages the AWS services that provide each. Simply select the features you need, such as authentication, analytics, and offline data synchronization, and Amplify automatically provisions and manages the AWS services that provide each.\nUse npm to install the Amplify CLI. If npm is not installed\nInstall via https://nodejs.org/en/download/\nInstall the Amplify CLI.\nnpm install -g @aws-amplify/cli  If it is not installed, proceed as follows :\nsudo npm install -g --unsafe-perm --verbose @aws-amplify/cli  Configure Amplify.\namplify configure  The way to configure amplify is\nFirst the aws console login screen leads to the browser. Log in and type Enter.\nThis workshop region is us-east-1. Enter us-east-1 as the Default Region.\nIn User name, enter the IAM user you want to create.\nGo to the Add user screen of the aws console through the logged in browser.\nPress next to move to the screen shown below.(Last screen)\nSave Download .csv to your local PC.\nPress Enter and type the Access Key followed by the Secret Access Key. Access Key and Secret Access Key can be imported from the downloaded csv file or add user screen.\nYou can use Profile Name as default or give it a name and use it as the –profile option. In this case, we put us-east-1-profile. (You can enter any name you like.)\n"
},
{
	"uri": "/socialapp/amplifyinstall/",
	"title": "Android Amplify Initialization",
	"tags": [],
	"description": "",
	"content": " Android Amplify Initialization Let\u0026rsquo;s use Android Amplify for easy back-end development of generated sample application.\n"
},
{
	"uri": "/socialapp/amplifyinstall/amplifyinit/",
	"title": "Amplify Initialization",
	"tags": [],
	"description": "",
	"content": "Move to the root directory of the downloaded sample app and initialize the Amplify project.\ncd aws-android-workshop/ amplify init  Enter Enter for the project name to use default\nThe environment is dev,\nThe editor chooses a convenient one. ( For example, vim ).\nThe OS type is Android\nFor res directory, type Enter to use default.\nChoose to use AWS Profile ( Y ) and select the profile you have already created. us-east-1-profile\nPlease refer to the picture below and enter.\nWhen the Amplify init is done, IAM roles are automatically created for authenticated and unauthenticated users. You can see two IAM roles created as below.\nAWS console \u0026gt; service \u0026gt; IAM \u0026gt; Roles \u0026gt;  Type \u0026ldquo;Aws-android-workshop-dev\u0026rdquo; in the search box\nYou can also see that res/raw/awsconfiguration.json file is created in Android Studio.\nYou can now create various AWS services using the Amplify CLI command.\ncommand can be used with:\n amplify add \u0026lt;category\u0026gt; amplify remove \u0026lt;category\u0026gt; amplify push \u0026lt;category\u0026gt;  "
},
{
	"uri": "/socialapp/cognito/",
	"title": "Authenticating users with Cognito",
	"tags": [],
	"description": "",
	"content": " Authenticating users with Cognito In this Chapter, we will implement a user authentication service with Amazon Cognito. The lab consists of social authentication via Facebook and authentication via e-mail.\n"
},
{
	"uri": "/socialapp/appsync/",
	"title": "Create a social post repository",
	"tags": [],
	"description": "",
	"content": " Create a social post repository Simplify application development by creating data storage and access APIs with AWS AppSync.\n"
},
{
	"uri": "/cleanup/delete/",
	"title": "Delete resource",
	"tags": [],
	"description": "",
	"content": "Use the following command to delete resources at once.\namplify delete amplify push  Delete the bucket in S3 where the photo was uploaded.\nDelete the Pinpoint project.\npinpoint\u0026gt;project\u0026gt;settings\u0026gt;General settings\u0026gt;Delete project\n"
},
{
	"uri": "/socialapp/cognito/facebook-config/",
	"title": "Configuring Facebook OAuth",
	"tags": [],
	"description": "",
	"content": "In this tutorial, we\u0026rsquo;re going to set up OAuth configurations on the Facebook developer site to support Facebook login.\nIn the lab, we will configure OAuth2.0 integration using the Hosted UI method provided by Amazon Cognito. With this method, we can implement social login without installing Facebook SDK.\n Create a developer account in Facebook developer portal. Log in to the Facebook developer site using own Facebook account. Select a \u0026lsquo;Create App\u0026rsquo; in \u0026lsquo;My Apps\u0026rsquo; menu.  Name Facebook app with \u0026lsquo;AWSAndroidWorkshop\u0026rsquo; and select \u0026lsquo;Create App ID\u0026rsquo;.  From the left navigation bar, select Settings \u0026gt; Basic.  Note created App ID and App Secret for the next lab.\n  "
},
{
	"uri": "/socialapp/cognito/amplify-cognito/",
	"title": "Configuring Amazon Cognito Service",
	"tags": [],
	"description": "",
	"content": "Amazon Cognito allows you to quickly and easily add user sign-up, sign-in, and access control to your mobile app.\nRun the following command from the top level of your Android project.\namplify add auth  Please refer to the picture below for the selection in progress.\nWhen setting the domain name, names including aws, amazon, cognito, and _ cannot be used. You should enter the name in the form of \u0026lsquo;android-workshop + random text\u0026rsquo;.\nEnter the redirect URI as shown below.\nredirect signin URI :\nsocialdemoapp://callback/  redirect signout URI :\nsocialdemoapp://signout/  When selecting a facebook from social providers, select it using the Space bar.\nApp ID and App Secret information uses the App ID and App Secret from the Facebook credentials you created in the previous tutorial.\nSelect No for Do you want to configure advanced settings for the GraphQL API?.\nWhen finished, update the relevant AWS resources with the following command:\namplify push  If the necessary resources have been created normally, you can check the Hosted UI Endpoint as shown below. To verify that the Cognito User Pool has been created, access the AWS Management Console(AWS console\u0026gt; Services\u0026gt; Cognito\u0026gt; User Pools). You can also see that each configuration value is created in res/raw/awsconfiguration.json file in Android Studio. Finally, update the Cognito domain information you created on the Facebook developer site.\n On the Facebook developer site, select the app you created in the previous tutorial (AWSAndroidWorkshop).\n From the left navigation bar, select Settings \u0026gt; Basic. Save Hosted UI Endpoint value output from Amplify CLI execution in App Domains. The same value as Cognito\u0026rsquo;s User Pool Domain Name can also be found in the AWS Management Console\u0026rsquo;s menu [AWS console\u0026gt; Services\u0026gt; Cognito\u0026gt; User Pools\u0026gt; Domain Name]. https://\u0026lt;your-user-pool-domain\u0026gt;  Go to the Dashboard menu on the Facebook developer site. Under \u0026lsquo;Add a Product\u0026rsquo;, choose the \u0026lsquo;Set Up\u0026rsquo; button to enable Facebook Login.  Move to \u0026lsquo;Products \u0026gt; Facebook Login \u0026gt; Settings\u0026rsquo; on the Facebook developer site. Enable \u0026lsquo;Embedded Browser OAuth Login\u0026rsquo;, enter the following URI in Valid OAuth Redirects URIs, and click Save Changes.\nhttps://\u0026lt;your-user-pool-domain\u0026gt;/oauth2/idpresponse   "
},
{
	"uri": "/socialapp/appsync/amplify-appsync/",
	"title": "Create Repository and Create API",
	"tags": [],
	"description": "",
	"content": "Add api using Amplify.\namplify add api  Input the value by referring to the picture below. Choose Amazon Cognito User Pool for the API. For users who signed up and signed in to Amazon Cognito, grant permission for accessing AWS resources. Authorization is also required for the API approach, which means using cognito as the authorization method.\nYou will be prompted to enter the schema in progress. The editor you set during amplify init will automatically appear during the schema entry process.\nWindows users often do not have an editor of their choice. If there is no editor, amplify add api is terminated without the schema input window. In this case, go to the path shown in the console message and open the file with the editor.\nExample : amplify\\backend/api/awsandroidworkshop/schema.graphql\nThe editor that enters the schema comes pre-filled with the ToDo schema. This is a sample schema. Delete all of them and replace with the schema below.\nThe schema uses the following values:\nUse @model to automatically create DynamoDB tables, AppSync DataSources, IAM roles, AppSync Resolvers, and more. Generate a partition and sort key for DynamoDB by @key. In other words, we will sort Post with ID (\u0026ldquo;DEV-DAY\u0026rdquo;) by upload time.\ntype Mutation { putPostWithPhoto( id: String!, author: String!, title: String, content: String, url: String, uptime: String!, photo: S3ObjectInput version: Int! ): Post } type S3Object { bucket: String! key: String! region: String! } input S3ObjectInput { bucket: String! key: String! region: String! localUri: String mimeType: String } type Post @model @key(fields:[\u0026quot;id\u0026quot;,\u0026quot;uptime\u0026quot;]){ id: String! author: String! title: String content: String url: String uptime: String! photo: S3Object version: Int! }  When \u0026lsquo;amplify add api\u0026rsquo; is completed, push to create cloud resource.\namplify push  Select the default value and press Enter.\nIf you go to  AWS console\u0026gt; service\u0026gt; AppSync , you can see that api is created as follows.\nAlso, if you go to  AWS console\u0026gt; service\u0026gt; AppSync\u0026gt; Data Sources , you can see that Dynamodb is created and linked with Data Source.\nNow let\u0026rsquo;s change the Resolver so that we can associate the newly added api with dynamodb. In  AWS console\u0026gt; service\u0026gt; AppSync\u0026gt; Schema , find putPostWithPhoto (..) in Resolvers and click Attach.\nSelect PostTable for Data source name. Select Put item with S3 ObjectPut for Configure the request mapping template.\nModify the key part of the loaded template as shown below. It means to use id received from source.\n\u0026quot;key\u0026quot; : { \u0026quot;id\u0026quot; : { \u0026quot;S\u0026quot; : \u0026quot;$ctx.args.id\u0026quot; } },  Delete the existing code from \u0026lsquo;Configure the response mapping template\u0026rsquo; and write as follows.\nThen press Save Resolver to save.\n$util.toJson($util.dynamodb.fromS3ObjectJson($context.source.file))  You can see that res /raw/awsconfiguration.json file is created in Android Studio.\nDownload the generated code using Amplify codegen to your Android project folder.\namplify codegen  Create a bucket in S3, which is the actual storage space.\nGo to AWS console\u0026gt; service\u0026gt; S3.\nSelect the blue button  Create Bucket .\nEnter a bucket name and press Create. The bucket name must be globally unique.\n"
},
{
	"uri": "/socialapp/pinpoint/fcm-settings/",
	"title": "Setting up Firebase Cloud Messaging (FCM)",
	"tags": [],
	"description": "",
	"content": "Amazon Pinpoint uses Firebase Cloud Messaging (FCM) to send push notifications. To do this, you need to create a firebase project.\nGo to https://console.firebase.google.com/\nIf you don\u0026rsquo;t have a Google account, create one and sign in if it\u0026rsquo;s signed out.\nSelect Create a project. Enter a project name and press Continue to move on to the next step.\nSince this workshop will only use FCM for push message, disable Emable Google Analytics for this project and move on to the next step.\nWhen the project is created, the following screen will be displayed. Select the gear icon in the top left corner with the Settings icon and select Project settings.\nThe General tab has Your apps at the bottom. Select the icon of android.\nEnter the Package name (com.example.socialandroidapp) and nickname (aws-android-workshop) as shown below. Press the Register app button to move on to the next step.\nPress the Download button on the screen to download the json file. Refer to the picture for the path to download.\nAfter that, select all as default and complete.\nBack in Settings, select the second tab, Cloud Messaging.\nCopy the value corresponding to Server key. You will need it in the next chapter.\n"
},
{
	"uri": "/prerequisites/",
	"title": "Start workshop",
	"tags": [],
	"description": "",
	"content": " Start workshop This workshop requires an AWS account.\nThe sample code is based on Android-JAVA.\nNo sample code is provided for Kotlin users.\n\n"
},
{
	"uri": "/devicefarm/remote/",
	"title": "To run a remote test",
	"tags": [],
	"description": "",
	"content": "Run the built app using a web-based remote test.\nFirst, create a project for your device farm.\nSelect \u0026lsquo;Create a new project\u0026rsquo; and enter a Project name as appropriate.\nIn the created project screen, select the \u0026lsquo;Remote access\u0026rsquo; tab and select \u0026lsquo;+ Start a new session\u0026rsquo;.\nCheck the \u0026lsquo;Show available \u0026hellip;\u0026rsquo; checkbox on the device selection screen. This option selects only those devices that can afford to start up within 30 seconds. You can also search for the desired device through the \u0026lsquo;Name\u0026rsquo; field. Select the appropriate device.\nSelect \u0026ldquo;Confirm and start session\u0026rdquo; at the bottom of the screen to proceed.\nNext comes the screen to request a device.\nOnce the request is complete, the session will appear on the screen and you can gesture and swipe as if you were using a real device. Occasionally, operations can be performed via the physical buttons below.\nUpload the provided APK file through the right upload button. Once uploaded, the APK file is saved for 30 days and can be reused at any time until explicitly deleted.\n"
},
{
	"uri": "/socialapp/cognito/cognito-splash/",
	"title": "Creating a splash screen",
	"tags": [],
	"description": "",
	"content": "In this tutorial, we will configure a splash page of the app. In the splash page, code is added to check the login status of Cognito. If there is no existing login information, move to the login main page, and if there is login information, move to the app main page.\nCopy the code snippet below to complete the _ initCognito method.\n// SplashActivity.java public class SplashActivity extends AppCompatActivity { ... private void _initCognito() { // Add code here if (AWSMobileClient.getInstance().getConfiguration() == null){ // Initialize user AWSMobileClient.getInstance().initialize(getApplicationContext(), new Callback\u0026lt;UserStateDetails\u0026gt;() { @Override public void onResult(UserStateDetails userStateDetails) { switch (userStateDetails.getUserState()){ case SIGNED_IN: // Open Main Activity CommonAction.openMain(context); break; case SIGNED_OUT: Log.d(TAG, \u0026quot;Do nothing yet\u0026quot;); CommonAction.openAuthMain(context); break; default: AWSMobileClient.getInstance().signOut(); break; } } @Override public void onError(Exception e) { Log.e(\u0026quot;INIT\u0026quot;, e.toString()); } }); } else if (AWSMobileClient.getInstance().isSignedIn()){ // Logined user CommonAction.openMain(context); } else { // Logouted user CommonAction.openAuthMain(context); } } ... }  Press Run button at the top of your Android Studio IDE to run the application with the emulator you have already created. If the app runs properly, you will see a splash screen. And login status checking logic runs in the background. If there is no login state, the page automatically will be moved to the login main page. "
},
{
	"uri": "/socialapp/appsync/android-appsync/",
	"title": "Write a post ",
	"tags": [],
	"description": "",
	"content": "Now let\u0026rsquo;s integrate it with the Write Activity for posts.\nAdd classpath to dependencies in build.gradle (Module: Project) as shown below.\nclasspath 'com.amazonaws:aws-android-sdk-appsync-gradle-plugin:2.9.+'  Apply the plugin to build.gradle (Module: app) Copy and paste the following at the top of build.gradle (Module: app) The code is automatically generated by this plugin.\napply plugin: 'com.amazonaws.appsync'  Note that when adding apply plugin: \u0026lsquo;com.amazonaws.appsync\u0026rsquo;, you may encounter com.amazonaws.appsync not found issues due to sync issues. After adding classpath \u0026lsquo;com.amazonaws: aws-android-sdk-appsync-gradle-plugin: 2.9. +\u0026lsquo;, sync it once, and then apply plugin to it.\nAlso add 4 implementations to dependencies in the same file, build.gradle (Module: app), as below.\ndependencies { ... implementation 'com.amazonaws:aws-android-sdk-appsync:2.9.+' implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0' implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1' implementation 'com.amazonaws:aws-android-sdk-s3:2.14.+' ... }  Next, to reuse the frequently used AWSAppSyncClient, create a ClientFactory class as shown below.\nClientFactory.java\npackage com.example.socialandroidapp; import android.content.Context; import android.util.Log; import com.amazonaws.auth.AWSCredentials; import com.amazonaws.auth.AWSCredentialsProvider; import com.amazonaws.auth.CognitoCachingCredentialsProvider; import com.amazonaws.mobile.client.AWSMobileClient; import com.amazonaws.mobile.config.AWSConfiguration; import com.amazonaws.mobileconnectors.appsync.AWSAppSyncClient; import com.amazonaws.mobileconnectors.appsync.S3ObjectManagerImplementation; import com.amazonaws.mobileconnectors.appsync.sigv4.CognitoUserPoolsAuthProvider; import com.amazonaws.regions.Region; import com.amazonaws.services.s3.AmazonS3Client; public class ClientFactory { private static AWSAppSyncClient mAWSAppSyncClient; public static void appSyncInit(Context context) { if (mAWSAppSyncClient == null) { mAWSAppSyncClient = AWSAppSyncClient.builder() .context(context) .awsConfiguration(new AWSConfiguration(context)) .cognitoUserPoolsAuthProvider(new CognitoUserPoolsAuthProvider() { @Override public String getLatestAuthToken() { try { return AWSMobileClient.getInstance().getTokens().getIdToken().getTokenString(); } catch (Exception e) { Log.e(\u0026quot;APPSYNC_ERROR\u0026quot;, e.getLocalizedMessage()); return e.getLocalizedMessage(); } } }).s3ObjectManager(getS3ObjectManager(context)).build(); } } public static AWSAppSyncClient getAppSyncClient() { return mAWSAppSyncClient; } private static S3ObjectManagerImplementation s3ObjectManager; // Copy the below two methods and add the .s3ObjectManager builder parameter // initialize and fetch the S3 Client public static S3ObjectManagerImplementation getS3ObjectManager(final Context context) { if (s3ObjectManager == null) { AmazonS3Client s3Client = new AmazonS3Client(ClientFactory.getCredentialsProvider(context)); s3Client.setRegion(Region.getRegion(\u0026quot;us-east-1\u0026quot;)); // you can set the region of bucket here s3ObjectManager = new S3ObjectManagerImplementation(s3Client); } return s3ObjectManager; } // initialize and fetch cognito credentials provider for S3 Object Manager public static AWSCredentialsProvider getCredentialsProvider(final Context context) { CognitoCachingCredentialsProvider credentialsProvider = new CognitoCachingCredentialsProvider( context, AWSMobileClient.getInstance().getConfiguration() ); return credentialsProvider; } public static String getUserID() { return AWSMobileClient.getInstance().getUsername(); } public static AWSCredentials getAWSCredentials() { AWSCredentials awsCredentials = null; try { awsCredentials = AWSMobileClient.getInstance().getAWSCredentials(); } catch (Exception e) { e.printStackTrace(); } return awsCredentials; } }  Create an AWSAppSyncClient using the ClientFactory created above in the onCreate function of WriteActivity.java.\nAdd ClientFactory.appSyncInit (..) to onCreate () as shown below.\n@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.write); //appsync ClientFactory.appSyncInit(getApplicationContext()); ... }  Add the addComment function to WriteActivity.java. Pressing the DONE button calls the addComment function, which uploads the post to the repository. Copy and paste the source and replace the  putYourBucketName variable with your S3 bucket name  \n//appsync upload private final String putYourBucketName = \u0026quot;putYourBucketName\u0026quot;; private final String mimeType = \u0026quot;image/jpg\u0026quot;; private final String region = \u0026quot;us-east-1\u0026quot;; private final String folderName = \u0026quot;public/\u0026quot;; private void addComment() { showWaitDialog(); S3ObjectInput s3ObjectInput = S3ObjectInput.builder() .bucket(putYourBucketName) .key(folderName + UUID.randomUUID().toString()) .region(region) .localUri(bitmapPath) .mimeType(mimeType).build(); PutPostWithPhotoMutation addPostMutation = PutPostWithPhotoMutation.builder() .title(title.getText().toString()) .author(ClientFactory.getUserID()) .url(bitmapPath) .content(contents.getText().toString()) .uptime(String.valueOf(System.currentTimeMillis())) .photo(s3ObjectInput) .id(\u0026quot;DEV-DAY\u0026quot;) .build(); ClientFactory.getAppSyncClient().mutate(addPostMutation).enqueue(postsCallback); } private GraphQLCall.Callback\u0026lt;PutPostWithPhotoMutation.Data\u0026gt; postsCallback = new GraphQLCall.Callback\u0026lt;PutPostWithPhotoMutation.Data\u0026gt;() { @Override public void onResponse(@Nonnull final Response\u0026lt;PutPostWithPhotoMutation.Data\u0026gt; response) { runOnUiThread(new Runnable() { @Override public void run() { dismissWaitDialog(); WriteActivity.this.finish(); } }); } @Override public void onFailure(@Nonnull final ApolloException e) { runOnUiThread(new Runnable() { @Override public void run() { dismissWaitDialog(); Log.e(\u0026quot;\u0026quot;, \u0026quot;Failed to perform AddPostMutation\u0026quot;, e); WriteActivity.this.finish(); } }); } };  Import the required class.\nimport com.amazonaws.amplify.generated.graphql.PutPostWithPhotoMutation; import com.apollographql.apollo.GraphQLCall; import com.apollographql.apollo.api.Response; import com.apollographql.apollo.exception.ApolloException; import type.S3ObjectInput; import javax.annotation.Nonnull; import android.util.Log;  This function can be called on saveBtn\u0026rsquo;s onClick event. Delete the existing code, WriteActivity.this.finish (), and add addComment () instead.\n@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.write); //appsync ClientFactory.appSyncInit(getApplicationContext()); ... saveBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (bitmapPath == null) { Toast.makeText(getApplicationContext(), getString(R.string.warning_picture), Toast.LENGTH_SHORT).show(); return; } //WriteActivity.this.finish(); addComment(); } }); ... }  Press Run button at the top of your Android Studio project to run the application with the emulator you have already created.\nThe executed screen is as follows.\nWhen you log in, you will see an empty list screen as shown below.\nPress the Write button to move to the post creation screen, compose and upload a photo as shown below, and press done button.\n If you installed the emulator for the first time, there are no pictures to choose from. Go to the Camera app and take a picture of the dummy and you can select it. \nAfter a while, you will be taken to an empty list screen.\n"
},
{
	"uri": "/socialapp/cognito/cognito-auth-social/",
	"title": "Implementing social login",
	"tags": [],
	"description": "",
	"content": "In this tutorial, we will implement Facebook-based social login using Cognito\u0026rsquo;s Hosted UI feature.\nWith Hosted UI feature, OAuth2 authentication is done between servers, so we do not need to install a mobile SDK provided by Facebook. Currently, supporting Identity Providers are Facebook, Google, and Amazon.\nCopy the code below to complete the _ openFacebookLogin method for adding Hosted UI functionality for Facebook login.\n// AuthMainActivity.java public class AuthMainActivity extends AppCompatActivity { ... private void _openFacebookLogin() { // Add code here HostedUIOptions hostedUIOptions = HostedUIOptions.builder() .scopes(\u0026quot;openid\u0026quot;, \u0026quot;email\u0026quot;) .identityProvider(\u0026quot;Facebook\u0026quot;) .build(); SignInUIOptions signInUIOptions = SignInUIOptions.builder() .hostedUIOptions(hostedUIOptions) .build(); AWSMobileClient.getInstance().showSignIn((Activity) context, signInUIOptions, new Callback\u0026lt;UserStateDetails\u0026gt;() { @Override public void onResult(UserStateDetails details) { Log.d(TAG, \u0026quot;onResult: \u0026quot; + details.getUserState()); } @Override public void onError(Exception e) { Log.e(TAG, \u0026quot;onError: \u0026quot;, e); } }); } ... }  Next, add code to detect the callback(socialdemoapp://callback/) called after social authentication completes and handle the event. In the lab, the page will be move to main menu when the scheme is called. implement the function to move to the main activity when the scheme is called.\n\u0026lt;!-- AndroidManifest.xml --\u0026gt; \u0026lt;activity android:name=\u0026quot;.AuthMainActivity\u0026quot; android:screenOrientation=\u0026quot;portrait\u0026quot; android:theme=\u0026quot;@style/AppTheme.NoActionBar\u0026quot;\u0026gt; \u0026lt;!-- Add code here--\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026quot;android.intent.action.VIEW\u0026quot; /\u0026gt; \u0026lt;category android:name=\u0026quot;android.intent.category.DEFAULT\u0026quot; /\u0026gt; \u0026lt;category android:name=\u0026quot;android.intent.category.BROWSABLE\u0026quot; /\u0026gt; \u0026lt;data android:scheme=\u0026quot;socialdemoapp\u0026quot; /\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt;  // AuthMainActivity.java public class AuthMainActivity extends AppCompatActivity { ... @Override protected void onResume() { super.onResume(); // Add code here Intent activityIntent = getIntent(); if (activityIntent.getData() != null \u0026amp;\u0026amp; \u0026quot;socialdemoapp\u0026quot;.equals(activityIntent.getData().getScheme())) { if (AWSMobileClient.getInstance().handleAuthResponse(activityIntent)) CommonAction.checkSession(this, true); } } ... }  Press Run button at the top of your Android Studio IDE to run the application with the emulator you have already created. When the following screen appears, press the Start with Facebook button to proceed with Facebook login. When you first run it in the emulator, if you see the following Facebook login screen, be sure to enter the ** Facebook developer account ** information you created in the previous tutorial. Since the Facebook app is in development mode, using a different account for login will cause the login to fail. If login is successful, the screen will be moved to the main page as shown below. If social authentication between servers is successful through the Cognito Hosted UI, the user\u0026rsquo;s information will be registered in the Cognito User Pool. The newly registered user information will be provided in the AWS Console\u0026gt; Cognito\u0026gt; General Settings\u0026gt; Users and groups. In some cases, around 1 minute may be required to see the update in the web console. After completing the lab, log out for the next tutorial.\n Select the SETTINGS button on the app main screen  Select the LOGOUT button on the app settings screen   "
},
{
	"uri": "/socialapp/cognito/cognito-auth-email/",
	"title": "Implementing e-mail based signup",
	"tags": [],
	"description": "",
	"content": "In this tutorial, we will implement email-based signup.\nBefore starting the lab, we will access the AWS Conginto management console to verify that email is selected as the login method. Verify that the contents of the Attributes item in the AWS Management Console are set up as shown below. Now let\u0026rsquo;s step through the code for email-based signup.\n Sign up using the email and password. Copy the code below to complete the signUp method for signing up. The signUp method adds a new user to the Cognito user pool with the email and password entered. If the user information is registered properly, the screen switches to SignUpConfirmFragment for user email authentication.\n// SignUpActivity.java public class SignUpActivity extends FragmentActivity implements SignUpFragment.OnFragmentInteractionListener, SignUpConfirmFragment.OnFragmentInteractionListener { ... @Override public void signUp(String email, String password) { userName = email; this.password = password; // Add code here final Map\u0026lt;String, String\u0026gt; attributes = new HashMap\u0026lt;\u0026gt;(); attributes.put(\u0026quot;email\u0026quot;, email); AWSMobileClient.getInstance().signUp(userName, password, attributes, null, new Callback\u0026lt;SignUpResult\u0026gt;() { @Override public void onResult(final SignUpResult signUpResult) { runOnUiThread(() -\u0026gt; { if (!signUpResult.getConfirmationState()) { final UserCodeDeliveryDetails details = signUpResult.getUserCodeDeliveryDetails(); makeToast(context, \u0026quot;Confirm sign-up with: \u0026quot; + details.getDestination()); setSignUpConfirmFragment(); } else { makeToast(context, \u0026quot;Sign-up done.\u0026quot;); } }); } @Override public void onError(Exception e) { Log.e(TAG, \u0026quot;Sign-up error\u0026quot;, e); runOnUiThread(() -\u0026gt; { if (e instanceof AmazonServiceException) makeToast(context, ((AmazonServiceException) e).getErrorMessage()); }); } }); } ... }  Email verification. If you successfully signed up in Step 1, you will receive a verification code by email. Copy the code below to complete the confirmSignUp method, which completes the signup phase by entering the verification code received from the email.\n// SignUpActivity.java public class SignUpActivity extends FragmentActivity implements SignUpFragment.OnFragmentInteractionListener, SignUpConfirmFragment.OnFragmentInteractionListener { ... @Override public void confirmSignUp(String code) { // Add code here AWSMobileClient.getInstance().confirmSignUp(userName, code, new Callback\u0026lt;SignUpResult\u0026gt;() { @Override public void onResult(final SignUpResult signUpResult) { runOnUiThread(() -\u0026gt; { Log.d(TAG, \u0026quot;Sign-up callback state: \u0026quot; + signUpResult.getConfirmationState()); if (!signUpResult.getConfirmationState()) { final UserCodeDeliveryDetails details = signUpResult.getUserCodeDeliveryDetails(); makeToast(context,\u0026quot;Confirm sign-up with: \u0026quot; + details.getDestination()); } else { makeToast(context, \u0026quot;Sign-up done.\u0026quot;); // SignIn and move to MainActivity _signIn(userName, password); } }); } @Override public void onError(Exception e) { Log.e(TAG, \u0026quot;Confirm sign-up error\u0026quot;, e); runOnUiThread(() -\u0026gt; { if (e instanceof AmazonServiceException) makeToast(context, ((AmazonServiceException) e).getErrorMessage()); }); } }); } ... }  Auto-Login. Once email verification is complete, complete the _ signIn function, which performs an automatic login using the email and password we used during the sign up phase.\n// SignUpActivity.java public class SignUpActivity extends FragmentActivity implements SignUpFragment.OnFragmentInteractionListener, SignUpConfirmFragment.OnFragmentInteractionListener { ... private void _signIn(String username, String password) { // Add code here AWSMobileClient.getInstance().signIn(username, password, null, new Callback\u0026lt;SignInResult\u0026gt;() { @Override public void onResult(final SignInResult signInResult) { runOnUiThread(() -\u0026gt; { Log.d(TAG, \u0026quot;Sign-in callback state: \u0026quot; + signInResult.getSignInState()); switch (signInResult.getSignInState()) { case DONE: makeToast(context, \u0026quot;Sign-in done.\u0026quot;); CommonAction.openMain(context); break; case SMS_MFA: makeToast(context, \u0026quot;Please confirm sign-in with SMS.\u0026quot;); break; case NEW_PASSWORD_REQUIRED: makeToast(context, \u0026quot;Please confirm sign-in with new password.\u0026quot;); break; default: makeToast(context, \u0026quot;Unsupported sign-in confirmation: \u0026quot; + signInResult.getSignInState()); break; } }); } @Override public void onError(Exception e) { Log.e(TAG, \u0026quot;Sign-in error\u0026quot;, e); runOnUiThread(() -\u0026gt; { if (e instanceof AmazonServiceException) makeToast(context, ((AmazonServiceException) e).getErrorMessage()); }); } }); } ... }   Now let\u0026rsquo;s run the code.\nPress Run button at the top of your Android Studio IDE to run the application with the emulator you have already created. When the following screen appears, click the Sign up text to go to the email-based sign up menu. When the following screen appears, enter your email and password to register. Please use a valid email account because an email verification process is required. Check your email inbox to see the verification code sent by the Cognito service. In the verification code input screen, enter the verification code delivered by email. If registration is successful, the page will be moved to the main screen of the app. Registered user information can be found through the Cognito menu in the AWS Management Console. After completing the lab, log out for the next tutorial.\n Select the SETTINGS button on the app main screen  Select the LOGOUT button on the app settings screen   "
},
{
	"uri": "/socialapp/appsync/s3iam/",
	"title": "IAM Role",
	"tags": [],
	"description": "",
	"content": "Posts made on the Write screen are not added to the table created in  AWS console\u0026gt; service\u0026gt; Dynamodb . The log below was not uploaded due to AccessDenied for S3.\n2019-09-04 11:13:55.305 8048-8081/com.example.socialandroidapp D/EGL_emulation: eglMakeCurrent: 0xe1005300: ver 3 0 (tinfo 0xe10036b0) 2019-09-04 11:13:55.321 8048-8057/com.example.socialandroidapp W/System: A resource failed to call close. 2019-09-04 11:13:55.330 8048-8081/com.example.socialandroidapp D/EGL_emulation: eglMakeCurrent: 0xe1005300: ver 3 0 (tinfo 0xe10036b0) 2019-09-04 11:13:55.334 8048-8081/com.example.socialandroidapp I/chatty: uid=10085(com.example.socialandroidapp) RenderThread identical 1 line 2019-09-04 11:13:55.366 8048-8081/com.example.socialandroidapp D/EGL_emulation: eglMakeCurrent: 0xe1005300: ver 3 0 (tinfo 0xe10036b0) 2019-09-04 11:13:57.057 8048-8153/com.example.socialandroidapp D/com.amazonaws.request: Received error response: com.amazonaws.services.s3.model.AmazonS3Exception: Access Denied (Service: null; Status Code: 403; Error Code: AccessDenied; Request ID: 80D7D91725581D4C), S3 Extended Request ID: dY+iw43vR8nE8DDB4L3F4/ijgC/Ydts/KKgwpwTcplUrtWTuN9GBfAxWcQNIgLRgqW0uR1OEYmA= 2019-09-04 11:13:57.059 8048-8153/com.example.socialandroidapp V/InterceptorCallback: Thread:[1086]: onFailure() S3 upload failed.  There was an IAM role created with the Amplify init. This role can be solved by giving S3 permission.\n AWS console\u0026gt; service\u0026gt; IAM\u0026gt; Role\u0026gt; aws-android-workshop-dev  in the search box and select auth role.\nPress Attach Policies on the Permissions tab\nEnter S3 in the filter policies. Select AmazonS3FullAccess from the search results and click Attach Policy.\nThe final figure is as follows.\nNow go back to the application logout and then log in again, write a post.\nAfter posting, you can see the new item has been added to DynamoDB.\nYou can see the photo uploaded on S3 as well.\n"
},
{
	"uri": "/socialapp/translate/translate/",
	"title": "Integrating Translate Service",
	"tags": [],
	"description": "",
	"content": "Add dependency to build.gradle (Module: app) as shown below.\ndependencies { ... implementation 'com.amazonaws:aws-android-sdk-translate:2.13.+' }  The TRANSLATE button is located on each post. Registers a button click event and listener in bindData () of PostAdapter for translation when the TRANSLATE button is pressed.\nvoid bindData(final ListPostsQuery.Item item) { titleTxt.setText(item.title()); ... //add translateBtn.setOnClickListener(new Button.OnClickListener() { public void onClick(View v) { doTranslate(contentsTxt); doTranslate(titleTxt); } }); }  Write the function responsible for the actual translation under the bindData () function. AmazonTranslateAsyncClient authenticates using AWSCredential from Cognito.\nprivate void doTranslate(final TextView tv) { AmazonTranslateAsyncClient translateAsyncClient = new AmazonTranslateAsyncClient(ClientFactory.getAWSCredentials()); TranslateTextRequest translateTextRequest = new TranslateTextRequest() .withText(tv.getText().toString()).withTargetLanguageCode(Util.getLanguageCode(ctx)) .withSourceLanguageCode(\u0026quot;auto\u0026quot;); translateAsyncClient.translateTextAsync(translateTextRequest, new AsyncHandler\u0026lt;TranslateTextRequest, TranslateTextResult\u0026gt;() { @Override public void onError(Exception e) { Log.e(TAG, \u0026quot;Error occurred in translating the text: \u0026quot; + e.getLocalizedMessage()); } @Override public void onSuccess(TranslateTextRequest request, TranslateTextResult translateTextResult) { tv.setText(translateTextResult.getTranslatedText()); } }); }  Press Attach Policies on the Permissions tab.\nPress Run at the top of your Android Studio project to run the application with the emulator you have already created.\nAccess the screen via the SETTINGS button on the main screen.\nSelect the language you want to translate from the list box in Preferred language setting. (Ex, korean)\nsave and return to the main screen. Press the Translate button to see if the translation is available. It is correct that no translation.\n"
},
{
	"uri": "/socialapp/cognito/cognito-auth-login/",
	"title": "Implementing e-mail based login",
	"tags": [],
	"description": "",
	"content": "In this exercise, we will implement an email-based login.\nCopy the code below to complete the _signIn method, which performs an email-based login.\n// LoginActivity.java public class LoginActivity extends AppCompatActivity implements Validator.ValidationListener { ... private void _signIn(String userName, String password) { AWSMobileClient.getInstance().signIn(userName, password, null, new Callback\u0026lt;SignInResult\u0026gt;() { @Override public void onResult(final SignInResult signInResult) { runOnUiThread(() -\u0026gt; { Log.d(TAG, \u0026quot;Sign-in callback state: \u0026quot; + signInResult.getSignInState()); switch (signInResult.getSignInState()) { case DONE: makeToast(context,\u0026quot;Sign-in done.\u0026quot;); CommonAction.openMain(context); break; case SMS_MFA: makeToast(context, \u0026quot;Please confirm sign-in with SMS.\u0026quot;); break; case NEW_PASSWORD_REQUIRED: makeToast(context, \u0026quot;Please confirm sign-in with new password.\u0026quot;); break; default: makeToast(context, \u0026quot;Unsupported sign-in confirmation: \u0026quot; + signInResult.getSignInState()); break; } }); } @Override public void onError(Exception e) { Log.e(TAG, \u0026quot;Sign-in error\u0026quot;, e); runOnUiThread(() -\u0026gt; { if (e instanceof AmazonServiceException) makeToast(context, ((AmazonServiceException) e).getErrorMessage()); }); } }); } ... }  Now let\u0026rsquo;s run the code.\nPress Run button at the top of your Android Studio IDE to run the application with the emulator you have already created. 아래와 같은 화면이 나오면 이메일로 로그인 텍스트를 눌러서 이메일 기반 로그인 메뉴로 이동합니다. When the following screen appears, click the Email login text to go to the email-based login menu. Log in with the user information used in the previous tutorial. If registration is successful, the page will be moved to the main screen of the app. "
},
{
	"uri": "/socialapp/translate/translateiam/",
	"title": "IAM Role",
	"tags": [],
	"description": "",
	"content": "The reason for not being translated is the following error in logcat: AccessDenied.\n2019-09-04 18:00:40.159 10974-11061/com.example.socialandroidapp E/dev-day-item: Error occurred in translating the text: User: arn:aws:sts::539063931014:assumed-role/aws-android-workshop-dev-20190903125208-authRole/CognitoIdentityCredentials is not authorized to perform: translate:TranslateText (Service: AmazonTranslate; Status Code: 400; Error Code: AccessDeniedException; Request ID: af77f01a-f368-4987-96f0-780c7c6ca26d)  There was an IAM role created with the Amplify init. This role can be solved by giving Translate permission.\n AWS console\u0026gt; service\u0026gt; IAM\u0026gt; Roles\u0026gt; aws-android-workshop-dev  in the search box and select auth role.\nPress Attach Policies on the Permissions tab\nEnter Translate in the filter policies. Select TranslateFullAccess from the search results and click Attach Policy.\nThe final figure is as follows.\nNow go back to the application and click the TRANSLATE button. You can see the change to the specified language.\n"
},
{
	"uri": "/socialapp/pinpoint/amplify-pinpoint/",
	"title": "Create an Amazon Pinpoint Service",
	"tags": [],
	"description": "",
	"content": "Now let\u0026rsquo;s create an Amazon Pinpoint service using the amplify command.\namplify add notifications  Select FCM as the notification channel as shown below.\nApkKey copies and pastes the server key of Cloud Messaging you created on the previous page.\nPush the created service.\namplify push  "
},
{
	"uri": "/socialapp/appsync/android-appsync-query/",
	"title": "List up posts ",
	"tags": [],
	"description": "",
	"content": "Now we will list up the posts posted by the user on the main screen.\nIn the onCreate function of MainActivity.java, create an AWSAppSyncClient using the ClientFactory.\nCopy ClientFactory.appSyncInit (\u0026hellip;) into onCreate () function as below.\n@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); checkPermission(); //appsync ClientFactory.appSyncInit(getApplicationContext()); ... }  Add code to onResume () to call queryList () as shown below.\nprotected void onResume() { super.onResume(); //appsync queryList(); }  Add a queryList () function and a callback function to get the required query result as shown below.\nprivate PostAdapter mAdapter; public void queryList() { ClientFactory.getAppSyncClient().query(ListPostsQuery.builder() .id(\u0026quot;DEV-DAY\u0026quot;) .sortDirection(ModelSortDirection.DESC) .build()) .responseFetcher(AppSyncResponseFetchers.CACHE_AND_NETWORK) .enqueue(queryCallback); } private ArrayList\u0026lt;ListPostsQuery.Item\u0026gt; mItems; private GraphQLCall.Callback\u0026lt;ListPostsQuery.Data\u0026gt; queryCallback = new GraphQLCall.Callback\u0026lt;ListPostsQuery.Data\u0026gt;() { @Override public void onResponse(@Nonnull Response\u0026lt;ListPostsQuery.Data\u0026gt; response) { Log.e(TAG, response.data().listPosts().items().toString()); mItems = new ArrayList\u0026lt;\u0026gt;(response.data().listPosts().items()); /* Log.i(TAG, \u0026quot;Retrieved list items: \u0026quot; + mItems.toString()); */ runOnUiThread(new Runnable() { @Override public void run() { mAdapter.setItems(mItems); mAdapter.notifyDataSetChanged(); } }); } @Override public void onFailure(@Nonnull ApolloException e) { e.printStackTrace(); } };  Import the necessary classes. In Android Studio, syntax that requires import displays an error in red. Move the cursor to the location, press the [MAC] option key and the Enter key ([Window] Alt key and Enter key) at the same time and select the import class. The required class is automatically imported.\nPosts are listup via RecyclerView. Create a PostAdapter class for use with the RecyclerView.\nPostAdapter.java\npackage com.example.socialandroidapp; import android.content.Context; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.Button; import android.widget.ImageView; import android.widget.TextView; import com.amazonaws.ClientConfiguration; import com.amazonaws.Protocol; import com.amazonaws.amplify.generated.graphql.ListPostsQuery; import com.amazonaws.services.s3.AmazonS3Client; import com.squareup.picasso.Picasso; import java.net.URL; import java.util.ArrayList; import java.util.Date; import java.util.List; import androidx.annotation.NonNull; import androidx.recyclerview.widget.RecyclerView; public class PostAdapter extends RecyclerView.Adapter\u0026lt;PostAdapter.Holder\u0026gt; { private static String TAG = \u0026quot;dev-day-item\u0026quot;; private LayoutInflater mInflater; private List\u0026lt;ListPostsQuery.Item\u0026gt; mData = new ArrayList\u0026lt;\u0026gt;(); private Context ctx; PostAdapter(Context context) { ctx = context; this.mInflater = LayoutInflater.from(context); } @NonNull @Override public PostAdapter.Holder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) { View view = mInflater.inflate(R.layout.post_item, viewGroup, false); Holder holder = new Holder(view); return holder; } @Override public void onBindViewHolder(@NonNull final PostAdapter.Holder holder, int i) { holder.bindData(mData.get(i)); ListPostsQuery.Photo so = mData.get(i).photo(); String bucketName = so.fragments().s3Object().bucket(); String pName = so.fragments().s3Object().key(); ClientConfiguration clientConfig = new ClientConfiguration(); clientConfig.setProtocol(Protocol.HTTP); AmazonS3Client s3 = new AmazonS3Client(ClientFactory.getAWSCredentials(), clientConfig); long d = System.currentTimeMillis() + (2 * 24 * 60 * 60 * 1000); URL url = s3.generatePresignedUrl(bucketName, pName, new Date(d)); final String tmpStr = url.toString(); Log.e(TAG, \u0026quot;URL = \u0026quot; + tmpStr); //new DownloadImageFromInternet(ctx, holder.iv).execute(tmpStr); Picasso.get().load(tmpStr).into(holder.iv); } @Override public int getItemCount() { return mData.size(); } public void setItems(List\u0026lt;ListPostsQuery.Item\u0026gt; items) { mData = items; } public class Holder extends RecyclerView.ViewHolder { private TextView writerTxt, contentsTxt, titleTxt; private ImageView iv; private Button translateBtn; public Holder(View view) { super(view); iv = view.findViewById(R.id.contentImg); writerTxt = view.findViewById(R.id.writer); contentsTxt = view.findViewById(R.id.contents); titleTxt = view.findViewById(R.id.title); translateBtn = view.findViewById(R.id.translateBtn); } void bindData(final ListPostsQuery.Item item) { writerTxt.setText(item.author()); contentsTxt.setText(item.content()); titleTxt.setText(item.title()); } } }  Create and link PostAdapter for RecyclerView.\nWrite the following at the bottom of onCreate () function of MainActivity.java\nprotected void onCreate(Bundle savedInstanceState) { ... mAdapter = new PostAdapter(getApplicationContext()); recyclerView = findViewById(R.id.itemlist); recyclerView.setLayoutManager(new LinearLayoutManager(this)); recyclerView.setHasFixedSize(true); recyclerView.setAdapter(mAdapter); }  Now when you run the app, you\u0026rsquo;ll see the first post you made in Posting.\n"
},
{
	"uri": "/socialapp/pinpoint/android-pinpoint/",
	"title": "Writing Android Code for Push Notifications  ",
	"tags": [],
	"description": "",
	"content": "Now let\u0026rsquo;s work with the Android project to receive Push Notifications.\nFirst add dependencies to build.gradle (Module: Project) as shown below.\ndependencies { ... classpath 'com.google.gms:google-services:4.0.1' ... }  Apply the plugin to build.gradle (Module: app)\napply plugin: 'com.google.gms.google-services'  Also add the following dependency to -build.gradle (Module: app)-in the same file.\ndependencies { ... // Overrides an auth dependency to ensure correct behavior implementation 'com.google.android.gms:play-services-auth:15.0.1' implementation 'com.google.firebase:firebase-core:16.0.1' implementation 'com.google.firebase:firebase-messaging:17.3.0' implementation 'com.amazonaws:aws-android-sdk-pinpoint:2.15.+' ... }  Go to AndroidManifest.xml and define Push Listener Service.\n\u0026lt;application\u0026gt; ... \u0026lt;service android:name=\u0026quot;.PushListenerService\u0026quot;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026quot;com.google.firebase.MESSAGING_EVENT\u0026quot;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/service\u0026gt; \u0026lt;/application\u0026gt;  Press Push notification to open the app. To do this, add Receiver to AndroidManifest.xml.\n\u0026lt;application\u0026gt; ... \u0026lt;receiver android:name=\u0026quot;com.amazonaws.mobileconnectors.pinpoint.targeting.notification.PinpointNotificationReceiver\u0026quot; android:exported=\u0026quot;false\u0026quot; \u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026quot;com.amazonaws.intent.fcm.NOTIFICATION_OPEN\u0026quot; /\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/receiver\u0026gt; \u0026lt;/application\u0026gt;  Go to MainActivity and write code to create an Amazon Pinpoint client.\npublic class MainActivity extends AppCompatActivity { ... private static PinpointManager pinpointManager; public static PinpointManager getPinpointManager(final Context applicationContext) { if (pinpointManager == null) { final AWSConfiguration awsConfig = new AWSConfiguration(applicationContext); AWSMobileClient.getInstance().initialize(applicationContext, awsConfig, new Callback\u0026lt;UserStateDetails\u0026gt;() { @Override public void onResult(UserStateDetails userStateDetails) { Log.i(\u0026quot;INIT\u0026quot;, userStateDetails.getUserState().toString()); } @Override public void onError(Exception e) { Log.e(\u0026quot;INIT\u0026quot;, \u0026quot;Initialization error.\u0026quot;, e); } }); PinpointConfiguration pinpointConfig = new PinpointConfiguration( applicationContext, AWSMobileClient.getInstance(), awsConfig); pinpointManager = new PinpointManager(pinpointConfig); FirebaseInstanceId.getInstance().getInstanceId() .addOnCompleteListener(new OnCompleteListener\u0026lt;InstanceIdResult\u0026gt;() { @Override public void onComplete(@NonNull Task\u0026lt;InstanceIdResult\u0026gt; task) { if (!task.isSuccessful()) { Log.w(TAG, \u0026quot;getInstanceId failed\u0026quot;, task.getException()); return; } final String token = task.getResult().getToken(); Log.d(TAG, \u0026quot;Registering push notifications token: \u0026quot; + token); pinpointManager.getNotificationClient().registerDeviceToken(token); } }); } return pinpointManager; } ... }  Import the required class. If you need more classes, import the classes using the Option \u0026amp; Enter or Alt \u0026amp; Enter key combinations as before.\nimport com.amazonaws.mobileconnectors.pinpoint.PinpointConfiguration; import com.amazonaws.mobileconnectors.pinpoint.PinpointManager; import android.content.Context; import com.amazonaws.mobile.config.AWSConfiguration; import com.amazonaws.mobile.client.UserStateDetails; import com.amazonaws.mobile.client.Callback; import com.amazonaws.mobile.client.AWSMobileClient; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.Task; import com.google.firebase.iid.FirebaseInstanceId; import com.google.firebase.iid.InstanceIdResult;  Initialize it using the getPinpointManager function you just created in the onCreate function of MainActivity.\nMainActivity.java\n@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ... // Initialize PinpointManager getPinpointManager(getApplicationContext()); ... }  Create a PushListenerService.java. This service receives and processes Push messages.\npackage com.example.socialandroidapp; import android.content.Intent; import android.os.Bundle; import androidx.localbroadcastmanager.content.LocalBroadcastManager; import android.util.Log; import com.amazonaws.mobileconnectors.pinpoint.targeting.notification.NotificationClient; import com.amazonaws.mobileconnectors.pinpoint.targeting.notification.NotificationDetails; import com.google.firebase.messaging.FirebaseMessagingService; import com.google.firebase.messaging.RemoteMessage; import java.util.HashMap; public class PushListenerService extends FirebaseMessagingService { public static final String TAG = PushListenerService.class.getSimpleName(); // Intent action used in local broadcast public static final String ACTION_PUSH_NOTIFICATION = \u0026quot;push-notification\u0026quot;; // Intent keys public static final String INTENT_SNS_NOTIFICATION_FROM = \u0026quot;from\u0026quot;; public static final String INTENT_SNS_NOTIFICATION_DATA = \u0026quot;data\u0026quot;; @Override public void onNewToken(String token) { super.onNewToken(token); Log.d(TAG, \u0026quot;Registering push notifications token: \u0026quot; + token); MainActivity.getPinpointManager(getApplicationContext()).getNotificationClient().registerDeviceToken(token); } @Override public void onMessageReceived(RemoteMessage remoteMessage) { super.onMessageReceived(remoteMessage); Log.d(TAG, \u0026quot;Message: \u0026quot; + remoteMessage.getData()); final NotificationClient notificationClient = MainActivity.getPinpointManager(getApplicationContext()).getNotificationClient(); final NotificationDetails notificationDetails = NotificationDetails.builder() .from(remoteMessage.getFrom()) .mapData(remoteMessage.getData()) .intentAction(NotificationClient.FCM_INTENT_ACTION) .build(); NotificationClient.CampaignPushResult pushResult = notificationClient.handleCampaignPush(notificationDetails); if (!NotificationClient.CampaignPushResult.NOT_HANDLED.equals(pushResult)) { /** The push message was due to a Pinpoint campaign. If the app was in the background, a local notification was added in the notification center. If the app was in the foreground, an event was recorded indicating the app was in the foreground, for the demo, we will broadcast the notification to let the main activity display it in a dialog. */ if (NotificationClient.CampaignPushResult.APP_IN_FOREGROUND.equals(pushResult)) { /* Create a message that will display the raw data of the campaign push in a dialog. */ final HashMap\u0026lt;String, String\u0026gt; dataMap = new HashMap\u0026lt;\u0026gt;(remoteMessage.getData()); broadcast(remoteMessage.getFrom(), dataMap); } return; } } private void broadcast(final String from, final HashMap\u0026lt;String, String\u0026gt; dataMap) { Intent intent = new Intent(ACTION_PUSH_NOTIFICATION); intent.putExtra(INTENT_SNS_NOTIFICATION_FROM, from); intent.putExtra(INTENT_SNS_NOTIFICATION_DATA, dataMap); LocalBroadcastManager.getInstance(this).sendBroadcast(intent); } /** * Helper method to extract push message from bundle. * * @param data bundle * @return message string from push notification */ public static String getMessage(Bundle data) { return ((HashMap) data.get(\u0026quot;data\u0026quot;)).toString(); } }  The code is now complete. Press Run button at the top of your Android Studio project to run it with the emulator you\u0026rsquo;ve already created. After execution, move to MainActivity screen.\n"
},
{
	"uri": "/prerequisites/gitclone/",
	"title": "Clone Workshop Repository",
	"tags": [],
	"description": "",
	"content": "Copy the repository containing the source files for the lab.\ngit clone https://github.com/xmrrh/aws-android-workshop.git  If you don\u0026rsquo;t have git installed, please go to the following page and download zip the source and unzip it..\nhttps://github.com/xmrrh/aws-android-workshop\n"
},
{
	"uri": "/devicefarm/fuzzy/",
	"title": "Fuzzy App Test",
	"tags": [],
	"description": "",
	"content": "In this step, you will run a simple test on multiple devices using the Fuzzy test.\n⦁ To create a test project, return to the AWS Console and select Device Farm from the list of services. ⦁ Select \u0026lsquo;+Create a New project\u0026rsquo; on the screen. ⦁ In the Create project popup, enter the appropriate Project name. ⦁ You will enter the test project screen with the Success statement. And created a Device Farm project for testing your app.\n⦁ Choose Create a new run.\n⦁ Click on the Android and Apple icons, select Upload from the Spending section below and select the apk file you created earlier. You can also drag and drop files into the upload area.\n⦁ Once the upload is complete, basic information about the app will be displayed. Information such as the domain name of the package, the main activity name, the minimum supported SDK version, and the supported screen size are listed. Choose Next step.\n⦁ Configure item appears and it is set as Built-in: Fuzz by default in Test item. Event Count specifies a number between 1 and 10,000 that indicates how many user interface events the test will perform. Event throttle specifies a number between 1 and 1,000 that represents the number of milliseconds the purge test waits before performing the next user interface event. Randomizer seed specifies the number to use when the fuzzy test randomizes user interface events. Specifying the same number for subsequent fuzzy tests ensures the same sequence of events.\n⦁ In the Fuzz test, set the default value and proceed. Click Next step. ⦁ Select devices. By default it uses a pre-configured list of the most popular models as Top Devices. You will see a preview of whether the uploaded app is compatible with your device. Depending on the case, you can configure test list presets according to the desired OS version and form factor in Create a new device pool. Go to the next step.\n⦁ The \u0026lsquo;Specify device state\u0026rsquo; page allows you to configure additional files and additional apps needed to run or test your app. You can also turn options such as WIFI and Bluetooth on or off. You can optionally specify the Latitude and Longitude as the Device location option. Leave all other values as Default and move on to the next step. ⦁ In \u0026lsquo;Review and start run\u0026rsquo;, you can set the maximum time to run. This prevents the devices to be tested from running for long periods of time with exceptions or unexpected behavior. In this demo, there are not many features of the app, and since the test is completed in a short time, we will set it to 5 minutes, which is the minimum operation time. Five minutes of operation on five devices takes 25 minutes. Start the Fuzz test with Confirm and start run.\n⦁ Fuzz Test Measurement and Results\n⦁ After completing the above steps, you will be returned to the project test page, indicating that the app is running a test. It will take the maximum time set before to complete the operation.\n⦁ Pressing the \u0026lsquo;Run List\u0026rsquo; to enter the details will show the execution results for each device and the screen shots generated in the test step. Looking at Summery, you can easily see the data points for each device. ⦁ If you click on one of the device list to go to details, you can view the video of the testing process, and you can view or download the details and logs of each test step. ⦁ In particular, you can check the performance issues that may occur by showing the CPU, Memory usage and Threads indicators in detail.\n"
},
{
	"uri": "/prerequisites/installtools/",
	"title": "Install Android Tools",
	"tags": [],
	"description": "",
	"content": " Java SDK, Android SDK, and Android Studio are required. If you need to install them, please install each one through the link below.\n** Note that Android SDK and AVD versions are not important. **\nJava SDK Install If you do not have Java SDK 8.0 or higher installed Download\nAndroid Studio and SDK Install If you don\u0026rsquo;t have Android Studio installed Download\nPlease install Android SDK as follows during installation.\nAndroid AVD (Emulator) Install Install Android Studio and run it. After running, select AVD Manager on the following screen.\nSelect  Create Virtual Device. \nSelect  Pixel 2  and press  Next .\n If you don\u0026rsquo;t have any AVDs installed, select Pie or Q. Next .\n !! Installation takes a very long time. If you have Oreo or Nougat installed, you can proceed with the AVD without additional installation. Press \u0026ldquo;cancel\u0026rdquo; to cancel. \nEnter your AVD name and press  Finish .\n"
},
{
	"uri": "/socialapp/",
	"title": "Create an application",
	"tags": [],
	"description": "",
	"content": " Create an application The architects used in this workshop are as follows.\n"
},
{
	"uri": "/socialapp/pinpoint/s3iam/",
	"title": "Send Push message",
	"tags": [],
	"description": "",
	"content": "Push messages can be sent via pinpoint\u0026rsquo;s campaign. In a shell, run: (You can also go directly from the console.)\namplify notifications console  Navigate to  AWS console\u0026gt; service\u0026gt; Pinpoint\u0026gt; campaigns\u0026gt; create a campaign .\nEnter first-push in Campaign name and go to Next.\nSelect Create a segment and name it myGroup. Go to the Next step. On the right, 3 endpoints is the number of mobile devices on which your app is currently active. The number of mobile devices targeted by the segment group. Modifying the filter changes the number of endpoints.\nFill in title and Body of Push notification details and go to Next step.\nLeave the default and go to the Next step.\nPress Launch campaign at the bottom to send the created push message to each device.\nThe following figure shows a push message received.\n"
},
{
	"uri": "/prerequisites/workspace/",
	"title": "Create Android Studio Project",
	"tags": [],
	"description": "",
	"content": "Start Android Studio.\nSelect Open an existing Android Studio project.\nSelect the downloaded source directory.\nWhen the project is created, it should look like the following. Make sure there are no issues with your build Press Run button at the top of your Android Studio project to run it with the emulator you\u0026rsquo;ve already created. It looks like this: You are now ready for the lab. Now let\u0026rsquo;s complete the features one by one using AWS services.\n"
},
{
	"uri": "/devicefarm/instrumented/",
	"title": "Sequential Testing with the Espresso Framework",
	"tags": [],
	"description": "",
	"content": "Perform procedural testing with the Espresso Framework\n⦁ Built-in Espresso test ⦁ Espresso is based on the built-in Android Test support library. Espresso Test Recoder, which is built into Android Studio, allows you to easily configure test presets in the order you want, and you can use it to test your apps on Device Farm.\n⦁ Return to Android studio and select Run\u0026gt; Record Espresso Test from the menu bar. ⦁ As with launching the app, a popup will appear to select the AVD. Select the device you just set up and press OK. ⦁ The Record Your Test pop-up window will appear with the Run AVD screen displayed. At this time, it is recorded in the right Record List in the order of operation on the app screen.\n Add Assertion is a procedure to check whether the view, text or screen exists.  ⦁ In the example, configure a scenario where login-\u0026gt; writing and ending will end.\n⦁ After configuring the test, press the OK button to save the test code. We will proceed with the name Default. ⦁ In the menu, go to Build\u0026gt; Rebuild Project and run Build APK(s) in the Build menu to create an APK.\n⦁ Run with Espresso Test Local AVD ⦁ First of all, let\u0026rsquo;s do a sequential test with Espresso locally. From the top icon, select Edit Confgurations.\n⦁ In the Run / Debug Configuraions popup, select and add Android Instrumented Tests. ⦁ Name the item and select app from Module on General tab. Select All in Package under Test.\n⦁ In package, select the appropriate app package.\n⦁ In Prefer Android Virtual Device category, select the AVD you created earlier. Then select OK to complete the test setup.\n⦁ In addition, comment out the testInstrumentationRunner \u0026ldquo;android.support.test.runner.AndroidJUnitRunner\u0026rdquo; part of the app\u0026rsquo;s build.gradle specification and add the testInstrumentationRunner \u0026ldquo;androidx.test.runner.AndroidJUnitRunner\u0026rdquo; to resolve the dependency.\n⦁ Since the camera is accessed during the test, the user authority for the camera is acquired. Add the following code above the  line in the manifests specification.\n \u0026lt;uses-permission android:name=\u0026quot;android.permission.CAMERA\u0026quot; /\u0026gt; \u0026lt;uses-feature android:name=\u0026quot;android.hardware.camera\u0026quot; android:required=\u0026quot;false\u0026quot; /\u0026gt; \u0026lt;uses-feature android:name=\u0026quot;android.hardware.camera.autofocus\u0026quot; android:required=\u0026quot;false\u0026quot; /\u0026gt;  ⦁ Building an app for testing may not run on a real device by default. To disable it, add the following parameter to gradle.properties.\nandroid.injected.testOnly=false  ⦁ Now check the Run menu at the top and you will see the test configuration we added earlier. If you select the configuration and run it, the device will run as if you were running an existing app as an AVD, and when the app runs, it will perform the actions you recorded earlier.\n⦁ If you check the Run Console, after successfully running the Tests ran to completion. You can see the message.\nv\n⦁ So far, we have configured espresso, a built-in test framework, and tested it on the local AVD. In the next chapter, we will perform espresso tests and monitor the results through the Device farm.\n⦁ Running Espresso Test and Monitoring Results with Device Farm ⦁ The overall procedure is similar to the Fuzz test we conducted earlier. Go back to the Device Farm console and select \u0026lsquo;+ Create a new project\u0026rsquo; from the list of projects that ran Fuzz. ⦁ Select \u0026lsquo;+ Create a new run\u0026rsquo;\n⦁ In the Choose application step, select Android / Apple. ⦁ Upload the built-in Apk from the Upload button, or select it from the list previously uploaded. Proceed to next step.\n⦁ On the Configure your test setup screen, set the Test Type to Instrumentation.\n⦁ Now you need to upload the instrumentation test generated by Espresso. Typical test package paths are built in \u0026lsquo;/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk\u0026rsquo;. Or, if the location does not exist or you are not sure, there is a description of the path in the output from the previous local test. * Advanced Configuration (optional) at the bottom is for video recording of the test and monitoring of App Performance data. Leave as default.\n⦁ When the upload is complete, information about the test instrumentation is displayed. The domain information for the base package and the information for Runner are displayed. In this case, espresso is Junit-based, so it is displayed as AndroidJUnitRunner. Leave the enviroment setting for the test filter at the bottom and proceed to the next step. ⦁ Select Devices will be set to Top Devices just like the existing Fuzz test. Sometimes, if you want to configure the model you want or shorten the test time, it is good to test with several models. Check the compatibility of the test app package for each model and proceed to the next step. ⦁ Sepecify device state goes to default. If your test requires compatibility with other language locales, set the desired locale in Device locale. Proceed to the next step.\n⦁ You can see the summery of the test progress and set the MAXIMUM MINUTES PER DEVICE to 5 minutes in the Execution timeout. Run Confirm and start run. ⦁ The test will now run on the run list, and will complete within 10 minutes on average.\n⦁ If you look at the details in the Devices list, you can see the sequential tests run locally.\n"
},
{
	"uri": "/socialapp/translate/",
	"title": "Integrating Amazon Translate",
	"tags": [],
	"description": "",
	"content": " Integrating Amazon Translate Now, let\u0026rsquo;s integrate Amazon Translate, which can translate the title and content of posts into various languages.\n"
},
{
	"uri": "/socialapp/pinpoint/",
	"title": "Send Push message",
	"tags": [],
	"description": "",
	"content": "#Send Push message\nLet\u0026rsquo;s practice using Amazon Ponpoint to send PUSH notifications to users who have your app installed.\n"
},
{
	"uri": "/cleanup/",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": " Clean up Delete the resources used in this workshop.\n"
},
{
	"uri": "/devicefarm/",
	"title": "DeviceFarm Test",
	"tags": [],
	"description": "",
	"content": " DeviceFarm Test In this step, you simply run the previously built app with DeviceFarm and perform parallel tests. In this test, you will run a Fuzzy test followed by a Frame Work test.\n\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/example_cf_templates/",
	"title": "Example of using CloudFormation Templates",
	"tags": [],
	"description": "",
	"content": " Click below to add a CloudFormation Stack    Use these templates:       Template 1 example \u0026lt;a     href=\u0026ldquo;https://console.aws.amazon.com/cloudformation/home?#/stacks/create/review?stackName=\u0026amp;templateURL=https://s3.amazonaws.com/awsandroidworkshop.com/templates/master/example1.yml\u0026quot; target=\u0026rdquo;_blank\u0026rdquo; class=\u0026ldquo;btn btn-default\u0026rdquo;\u0026gt;  Launch  |  Download  | | Template 2 example |  Launch  |  Download  | | Template 3 example |  Launch  |  Download  |\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]