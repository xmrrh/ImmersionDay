<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Authenticating users with Cognito on AWS Android Social HoL</title>
    <link>/socialapp/cognito/</link>
    <description>Recent content in Authenticating users with Cognito on AWS Android Social HoL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Tue, 07 Aug 2018 08:30:11 -0700</lastBuildDate>
    
	<atom:link href="/socialapp/cognito/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configuring Amazon Cognito Service</title>
      <link>/socialapp/cognito/amplify-cognito/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/amplify-cognito/</guid>
      <description>Amazon Cognito allows you to quickly and easily add user sign-up, sign-in, and access control to your mobile app.
Run the following command from the top level of your Android project.
amplify add auth  Please refer to the picture below for the selection in progress. When finished, build all your local backend resources and provision it in the cloud with the following command:
amplify push  Press &amp;lsquo;Y&amp;rsquo; to continue.</description>
    </item>
    
    <item>
      <title>Creating a splash screen</title>
      <link>/socialapp/cognito/cognito-splash/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-splash/</guid>
      <description>In this tutorial, we will configure a splash page of the app. On the splash page, code is added to check the login status. If there is no existing login information, the page will be moved to the LOGIN MAIN page, and if there is login information, the page will be moved to the APP MAIN page.
Copy the code snippet below to complete the _ initCognito method.
// SplashActivity.java public class SplashActivity extends AppCompatActivity { .</description>
    </item>
    
    <item>
      <title>Implementing e-mail based signup</title>
      <link>/socialapp/cognito/cognito-auth-email/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-auth-email/</guid>
      <description>In this tutorial, we will implement email-based signup with client APIs provided by AWSMobileClient.
Before starting the lab, we need to access the AWS Conginto management console to verify that email is selected as the login method. Verify that the contents of the Attributes item in the AWS Management Console are set up as shown below. Now let&amp;rsquo;s step through the code for email-based signup.
 Sign up using the email and password.</description>
    </item>
    
    <item>
      <title>Implementing e-mail based login</title>
      <link>/socialapp/cognito/cognito-auth-login/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/cognito/cognito-auth-login/</guid>
      <description>In this exercise, we will implement an email-based login.
Copy the code below to complete the _signIn method, which performs an email-based login.
// LoginActivity.java public class LoginActivity extends AppCompatActivity implements Validator.ValidationListener { ... private void _signIn(String userName, String password) { AWSMobileClient.getInstance().signIn(userName, password, null, new Callback&amp;lt;SignInResult&amp;gt;() { @Override public void onResult(final SignInResult signInResult) { runOnUiThread(() -&amp;gt; { Log.d(TAG, &amp;quot;Sign-in callback state: &amp;quot; + signInResult.getSignInState()); switch (signInResult.getSignInState()) { case DONE: makeToast(context,&amp;quot;Sign-in done.</description>
    </item>
    
  </channel>
</rss>