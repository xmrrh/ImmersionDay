<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Create a social post repository on AWS Android Social HoL</title>
    <link>/socialapp/appsync/</link>
    <description>Recent content in Create a social post repository on AWS Android Social HoL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Tue, 07 Aug 2018 08:30:11 -0700</lastBuildDate>
    
	<atom:link href="/socialapp/appsync/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create Repository and Create API</title>
      <link>/socialapp/appsync/amplify-appsync/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/appsync/amplify-appsync/</guid>
      <description>Add api using Amplify.
amplify add api  Input the value by referring to the picture below. Choose Amazon Cognito User Pool for the API. For users who signed up and signed in to Amazon Cognito, grant permission for accessing AWS resources. Authorization is also required for the API approach, which means using cognito as the authorization method.
You will be prompted to enter the schema in progress. The editor you set during amplify init will automatically appear during the schema entry process.</description>
    </item>
    
    <item>
      <title>Write a post </title>
      <link>/socialapp/appsync/android-appsync/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/appsync/android-appsync/</guid>
      <description>Now let&amp;rsquo;s integrate it with the Write Activity for posts.
Add classpath to dependencies in build.gradle (Module: Project) as shown below.
classpath &#39;com.amazonaws:aws-android-sdk-appsync-gradle-plugin:2.9.+&#39;  Apply the plugin to build.gradle (Module: app) Copy and paste the following at the top of build.gradle (Module: app) The code is automatically generated by this plugin.
apply plugin: &#39;com.amazonaws.appsync&#39;  Note that when adding apply plugin: &amp;lsquo;com.amazonaws.appsync&amp;rsquo;, you may encounter com.amazonaws.appsync not found issues due to sync issues.</description>
    </item>
    
    <item>
      <title>IAM Role</title>
      <link>/socialapp/appsync/s3iam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/socialapp/appsync/s3iam/</guid>
      <description>Posts made on the Write screen are not added to the table created in  AWS console&amp;gt; service&amp;gt; Dynamodb . The log below was not uploaded due to AccessDenied for S3.
2019-09-04 11:13:55.305 8048-8081/com.example.socialandroidapp D/EGL_emulation: eglMakeCurrent: 0xe1005300: ver 3 0 (tinfo 0xe10036b0) 2019-09-04 11:13:55.321 8048-8057/com.example.socialandroidapp W/System: A resource failed to call close. 2019-09-04 11:13:55.330 8048-8081/com.example.socialandroidapp D/EGL_emulation: eglMakeCurrent: 0xe1005300: ver 3 0 (tinfo 0xe10036b0) 2019-09-04 11:13:55.334 8048-8081/com.example.socialandroidapp I/chatty: uid=10085(com.example.socialandroidapp) RenderThread identical 1 line 2019-09-04 11:13:55.</description>
    </item>
    
    <item>
      <title>List up posts </title>
      <link>/socialapp/appsync/android-appsync-query/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/socialapp/appsync/android-appsync-query/</guid>
      <description>Now we will list up the posts posted by the user on the main screen.
In the onCreate function of MainActivity.java, create an AWSAppSyncClient using the ClientFactory.
Copy ClientFactory.appSyncInit (&amp;hellip;) into onCreate () function as below.
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); checkPermission(); //appsync ClientFactory.appSyncInit(getApplicationContext()); ... }  Add code to onResume () to call queryList () as shown below.
protected void onResume() { super.onResume(); //appsync queryList(); }  Add a queryList () function and a callback function to get the required query result as shown below.</description>
    </item>
    
  </channel>
</rss>